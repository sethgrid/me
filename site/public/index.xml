
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
 <channel>
   <title>Seth Ammons</title>
   <link>https://sethammons.com/</link>
   <description>Recent content on Seth Ammons</description>
   <generator>Hugo -- gohugo.io</generator>
   <language>en-us</language>
   <copyright>Copyright (c) 2001 - 2020, Seth Ammons; all rights reserved.</copyright>
   <lastBuildDate>Mon, 25 May 2015 10:10:55 -0700</lastBuildDate>
   
       <atom:link href="https://sethammons.com/index.xml" rel="self" type="application/rss+xml" />
   
   
     <item>
       <title>Pester: Go (Golang) HTTP retries, backoff, and concurrency</title>
       <link>https://sethammons.com/posts/pester/</link>
       <pubDate>Mon, 25 May 2015 10:10:55 -0700</pubDate>
       
       <guid>https://sethammons.com/posts/pester/</guid>
       <description>&lt;h3 id=&#34;resiliency-in-http-requests&#34;&gt;Resiliency in HTTP requests&lt;/h3&gt;
&lt;p&gt;Having worked for a few years on high scale and high availability systems, I&#39;ve learned there are a few tricks that you can employ to make sure your requests make it back from over the network. There are two basic approaches in this arena: fail and recover fast (ala &lt;a href=&#34;https://github.com/Netflix/Hystrix&#34;&gt;Hystrix&lt;/a&gt;) and the bit older method of handling retires, backoff, and making concurrent requests. Hystrix seems pretty dang awesome, but may be a little heavy handed. I would like to introduce a small library wrapper I put together to handle the other side of the coin for retries, backoff, and concurrency: &lt;a href=&#34;https://github.com/sethgrid/pester&#34;&gt;Pester&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;retries&#34;&gt;Retries&lt;/h3&gt;
&lt;p&gt;Some requests go out and hit a transitory error. Here is a recent example I&#39;ve run into. We built an authorization system that creates a few hundred permission entries in our datastore when a user is created, adding to the millions of other records. Other services in our system can hit our authorization system on behalf of the new user nearly immediately, but due to replication lag, we may not have the data available just yet. More concretely, we could have a situation where &lt;code&gt;authorizationURL/{:user_id}&lt;/code&gt; does not exist one moment and 404&#39;s, but the next moment will 200 and return data.&lt;/p&gt;
&lt;p&gt;How can we deal with this? One option is to allow the service to just have an error and give a crap user experience. I&#39;m not a fan of this approach. I&#39;d wager we want to retry. Now we wrap our calls to the authorization service with special 404 handling to wait some amount of time and then try again. What if we&#39;ve suffered a network partition? What if we could have multiple seconds (or worse, minutes) of down time for a given service, and we find we want to keep trying the downed endpoint? We can keep retrying but add some backoff to each request.&lt;/p&gt;
&lt;h3 id=&#34;backoff&#34;&gt;Backoff&lt;/h3&gt;
&lt;p&gt;To help prevent us from knocking down the downstream service with requests (maybe it is responding so slowly due to increased load) we can introduce a backoff strategy. The strategy you use depends on your use case. It may make sense to wait one second between retries, or it may make sense to increase the backoffs from 1 second to 10 to several minutes or longer. Some of the systems I work on have retries that can happen hours later.&lt;/p&gt;
&lt;p&gt;If we find ourselves making metric craptonnes of calls, we don&#39;t want to find all of our backoffs in sync. If our errors are due to load, we want to make sure our backoffs are staggered to avoid kicking the error can down the street. One solution to this problem is to add jitter to your backoffs by adding or subtracting some random amount of time to each request&#39;s scheduled backoff. This can work to ensure that we don&#39;t have a traveling herd of requests and errors.&lt;/p&gt;
&lt;h3 id=&#34;concurrency&#34;&gt;Concurrency&lt;/h3&gt;
&lt;p&gt;We&#39;ve gone over ways to increase our system resiliency with retries and backoff, but what about getting our data back more quickly? If we are hitting our load balancer and it is routing calls for us, we may have calls that find their way to less busy servers. If we send out three requests, and they would come back at 200ms, 18ms, and 60ms. By making these three requests concurrently, we can get back our fastest 18ms response and continue about our day.&lt;/p&gt;
&lt;h3 id=&#34;pester&#34;&gt;Pester&lt;/h3&gt;
&lt;p&gt;Go&#39;s standard library is super solid. Building atop of it, I put together a simple library that has built-in retries, backoff, and concurrency. With Pester, I made sure that anyone who wanted to use it would not have to change any of their logic in their apps that deal with http client calls. Simply replace your http client calls with the pester version and you&#39;re set. Pester provides an http client that matches the standlib and supports &lt;code&gt;.Get&lt;/code&gt;, &lt;code&gt;.Post&lt;/code&gt;,&lt;code&gt;.PostForm&lt;/code&gt;,&lt;code&gt;.Head&lt;/code&gt;, and &lt;code&gt;.Do&lt;/code&gt;. Each of which that can make automatic use of retries and backoff, and idempotent calls (aka GET) can make use of making concurrent requests. I hope your project can benefit from it!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{ // drop in replacement for http.Get and other client methods
    resp, err := pester.Get(SomeURL)
    if err != nil {
        log.Fatalf(&amp;quot;error GETing default&amp;quot;, err)
    }
    defer resp.Body.Close()

    log.Printf(&amp;quot;GET: %s&amp;quot;, resp.Status)
}


{ // control the resiliency
    client := pester.New()
    client.Concurrency = 3
    client.MaxRetries = 5
    client.Backoff = pester.ExponentialJitterBackoff
    client.KeepLog = true

    resp, err := client.Get(SomeURL)
    if err != nil {
        log.Fatalf(&amp;quot;error GETing with all options, %s&amp;quot;, client.LogString())
    }
    defer resp.Body.Close()

    log.Printf(&amp;quot;Full Example: %s [request %d, retry %d]&amp;quot;, resp.Status, client.SuccessReqNum, client.SuccessRetryNum)
}
&lt;/code&gt;&lt;/pre&gt;</description>
     </item>
   
     <item>
       <title>Finally, now we can get started</title>
       <link>https://sethammons.com/posts/finally/</link>
       <pubDate>Tue, 07 Apr 2015 18:02:55 -0700</pubDate>
       
       <guid>https://sethammons.com/posts/finally/</guid>
       <description>&lt;h3 id=&#34;posting-new-content-under-docker&#34;&gt;Posting new content under Docker&lt;/h3&gt;
&lt;p&gt;Time is so hard to find. Getting pulled three ways from Sunday at work has left me outside of a solid work-life balance. As such, it I have not had the opportunity to get back to playing with this setup.&lt;/p&gt;
&lt;p&gt;Well, the time has come. I finally got everything figured out between Digital Ocean, Hugo, and Docker.&lt;/p&gt;
&lt;h2 id=&#34;the-set-up&#34;&gt;The Set Up&lt;/h2&gt;
&lt;p&gt;Check out &lt;a href=&#34;http://www.github.com/sethgrid/me&#34;&gt;this repo&lt;/a&gt; for the complete digs; there you will find everything. Here are the basics. I used &lt;code&gt;fig&lt;/code&gt; mostly &amp;ldquo;just because&amp;rdquo;. I wanted to see how it orchestrated docker containers together. I did not get too deep into that, but, hey, there is a redis server running on this box. It does not do anything, but it is there!&lt;/p&gt;
&lt;h2 id=&#34;the-problem&#34;&gt;The Problem&lt;/h2&gt;
&lt;p&gt;After getting everything basically set up, I ran into an issue where the Hugo theme was not being applied. Looking at the source of the generated pages, it became quickly evident what was going on: all the links to resources were to the localhost. For whatever reason, the Hugo config was not picking up the &lt;code&gt;baseURL&lt;/code&gt; config value.&lt;/p&gt;
&lt;p&gt;The way I got around that was to use one of Hugo&#39;s flags, &lt;code&gt;baseURL&lt;/code&gt;, as seen in my &lt;code&gt;fig.yml&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  command: hugo server --theme=nofancy --buildDrafts --baseUrl=http://104.131.9.167:1313
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;finishing-up&#34;&gt;Finishing Up&lt;/h2&gt;
&lt;p&gt;After scp&#39;ing my repo up to my Digital Ocean instance, I installed fig (Docker was already there). To handle the need for &lt;code&gt;sudo fig ...&lt;/code&gt;, I created a symlink for &lt;code&gt;/usr/bin/fig&lt;/code&gt; to &lt;code&gt;/usr/sbin/fig&lt;/code&gt;. All that was needed was to &lt;code&gt;fig build &amp;amp;&amp;amp; fig up&lt;/code&gt;. Presto, done.&lt;/p&gt;
&lt;h2 id=&#34;todo&#34;&gt;Todo&lt;/h2&gt;
&lt;p&gt;I want to get the container size down. It is sitting at about 350mb. I&#39;ll be looking into tips and tricks to see what I can do in that regard. Additionally, I&#39;m creating the docker image locally on the Digital Instance. I&#39;d like to generate it on my laptop and scp it up. We will see.&lt;/p&gt;
&lt;h3 id=&#34;update&#34;&gt;Update&lt;/h3&gt;
&lt;p&gt;I had to modify the command to start hugo. After setting up DNS, I changed my baseURL to my domain, and appended a flag to ignore the port.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;  command: hugo server --theme=nofancy --buildDrafts --baseUrl=http://sethammons.com --appendPort=false
&lt;/code&gt;&lt;/pre&gt;</description>
     </item>
   
     <item>
       <title>Hugo Syntax Highlighting</title>
       <link>https://sethammons.com/posts/hugo_syntax_highlighting/</link>
       <pubDate>Sun, 01 Mar 2015 10:50:48 -0800</pubDate>
       
       <guid>https://sethammons.com/posts/hugo_syntax_highlighting/</guid>
       <description>&lt;p&gt;So, a few minutes ago, I was all excited on how easy Hugo was to get started. While I really like what I am seeing in a lot of ways, what I do not like is the documentation for syntax highlighting.&lt;/p&gt;
&lt;p&gt;From the &lt;a href=&#34;http://gohugo.io/overview/configuration/&#34;&gt;configuration page&lt;/a&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# color-codes for highlighting derived from this style
pygmentsStyle:              &amp;quot;monokai&amp;quot;
# true: use pygments-css or false: color-codes directly
pygmentsUseClasses:         false
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Using this, coupled with the &lt;a href=&#34;http://gohugo.io/extras/highlighting/&#34;&gt;syntax highlighting page&lt;/a&gt;, I cannot get sytanx highlighting to work the way you would think it should.&lt;/p&gt;
&lt;p&gt;Using defaults, I can do something like:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    // I have the `{` escaped because I can&#39;t figure
    // out how to show the handlebars in this view:(
    \{\{&amp;lt; highlight go &amp;gt;}}
    package main
    ...
    \{\{&amp;lt; /highlight &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;And. as long as &lt;code&gt;pygmentsUseClasses&lt;/code&gt; is defaulted to false, I am solid. However, I don&#39;t like the default black background. I figured it should be trivial to update to a different style. This is where things fell apart.&lt;/p&gt;
&lt;p&gt;If I change &lt;code&gt;pygmentsStyle&lt;/code&gt; to &lt;em&gt;anything&lt;/em&gt; other than &lt;code&gt;&amp;quot;monokai&amp;quot;&lt;/code&gt;, the code block changes to just a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; tag. If I change &lt;code&gt;pygmentsUseClasses&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;, I get no syntax highlighting. Period.&lt;/p&gt;
&lt;p&gt;I figured this could be easily overcome. I went into the css that was I though should be loading. There is &lt;code&gt;public/css/syntax.css&lt;/code&gt; and I should be able to just overwrite the css with the values I want. Apparently, I have no clue what I am doing. Adjusting the colors in that file would not change the way code looked on the screen.&lt;/p&gt;
&lt;p&gt;At this point, I have other things to do. Like write this post. I have a lunch/dinner guests coming over, and what should have been very straight forward has turned out to be a time sink. All I wanted was pretty syntax highlighting.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Moving to Hugo</title>
       <link>https://sethammons.com/posts/first/</link>
       <pubDate>Sun, 01 Mar 2015 08:27:46 -0800</pubDate>
       
       <guid>https://sethammons.com/posts/first/</guid>
       <description>&lt;h3 id=&#34;now-on-hugo&#34;&gt;Now on Hugo&lt;/h3&gt;
&lt;p&gt;I&#39;ve been looking lately to move off my shared hosting (I know, right?) and I have been seeking an excuse to move all my stuff over to Digital Ocean. I&#39;ve finally gotten off the pot, and decided that I would expore Docker using Digital Ocean as the backing hardware.&lt;/p&gt;
&lt;p&gt;Previously, I had a homegrown site. As I don&#39;t spend my freetime making hot designs anymore, that site quickly fell out of anything resembling something polished. I switched over to the first blog-like management utility I could quickly set up on the shared hosting. It could not handle code snippets and that limited my drive to keep posting. Being so busy, I just let it slide.&lt;/p&gt;
&lt;p&gt;Fast foward to today, and I finally decided it was time to get my web-presence back up-to-snuff. Knowing that I was to play with Docker and Digital Ocean, coupled with knowing that I wanted something easily able to write small posts about and show code snippits (and the fact that I am thuroughly enjoying Go), it seemed like Hugo was a great choice.&lt;/p&gt;
&lt;p&gt;So, here it is. My first post in Hugo.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;

&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;log&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;(){
        &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Digital Ocean + Docker + Hugo = Posting Again&amp;#34;&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
</description>
     </item>
   
     <item>
       <title>Switch to Mac from Ubuntu</title>
       <link>https://sethammons.com/posts/the_switch_to_mac/</link>
       <pubDate>Tue, 24 Sep 2013 18:02:55 -0700</pubDate>
       
       <guid>https://sethammons.com/posts/the_switch_to_mac/</guid>
       <description>&lt;p&gt;At work, we are trying to push towards a homogenous grouping of developer environments (beyond the common VMs) and all developers are encouraged to go the Mac route on the dev’s next upgrade. My System76’s screen cracked (Nooooooooo!) and I started working on the slick XPS13 Developer Ed. The poor little machine could not keep up with a simple VM. So, Mac it was.&lt;/p&gt;
&lt;p&gt;My first impressions are that (in no particular order):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;control&lt;/code&gt; button is in the wrong place.&lt;/li&gt;
&lt;li&gt;Switching workspaces is a pain. I cannot take my currently focused window with me to a different workspace just using the keyboard. This breaks my entire workflow. Using Dexpot for Windows, I can at least simulate my workflow, though, I’d rather stay clear of that OS (mostly for lack a decent, native CLI).&lt;/li&gt;
&lt;li&gt;Alfred is not a replacement for the &lt;code&gt;super&lt;/code&gt; key in Unity.&lt;/li&gt;
&lt;li&gt;The red close button does not quit an application always. In two important cases (Chrome and Sublime Text 3), it closes the window but leaves the application running, thus losing my tabs and workspace.&lt;/li&gt;
&lt;li&gt;I can’t figure out (I haven’t googled it yet) how to dim my ThunderBolt display.&lt;/li&gt;
&lt;li&gt;A model window popped up and I could not hit &lt;code&gt;tab&lt;/code&gt; to cycle through and select &lt;code&gt;OK&lt;/code&gt; or whatever the button was. I had to use the mouse.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ls&lt;/code&gt; requires parameters to be useful (&lt;code&gt;ls -GF&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sudo&lt;/code&gt; while installing is the enemy.&lt;/li&gt;
&lt;li&gt;Right-click is painfully missing and getting used to control+click is a nuisance (two hands?!).&lt;/li&gt;
&lt;li&gt;I can no longer ctrl+enter while in the address bar to auto-append &lt;code&gt;.com&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;That said, many things seemed well polished, especially the dual monitor support. Ubuntu has come so far with monitor support lately, but they are really playing catch-up with Mac. I like gestures for moving to other workspaces. I’m still out on iTerm2. I really liked Terminator, but I am sure I’ll get used to this new terminal shortly. I feel that I could work around everything if I could just get workspaces to flow right (as in, be able to take the window in focus with me with something similar to alt+shift+ctrl+arrow and no mouse).&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Settings Backup, Part 2</title>
       <link>https://sethammons.com/posts/backup_settings_part_2/</link>
       <pubDate>Thu, 15 Aug 2013 18:02:55 -0700</pubDate>
       
       <guid>https://sethammons.com/posts/backup_settings_part_2/</guid>
       <description>&lt;h3 id=&#34;settings-backup-part-2&#34;&gt;Settings Backup, Part 2&lt;/h3&gt;
&lt;p&gt;Somehow my laptop screen got a crack in it. Totally suxorz. I have… er… had a System76 Serval Professional. Awesome machine. While that rig is being sent out for repairs, I’ve installed Ubuntu on a spare laptop and pulled in my Github repo with my settings backup. Presto, chango — my terminal in all its bashy goodness is back to the exact way I like it. Couple that with a Dropbox full of standard background images set up with Wallch and it is like I never changed computers.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Bloody Perl</title>
       <link>https://sethammons.com/posts/bloody_perl/</link>
       <pubDate>Thu, 11 Jul 2013 18:02:55 -0700</pubDate>
       
       <guid>https://sethammons.com/posts/bloody_perl/</guid>
       <description>&lt;p&gt;Working through some Perl code today (shudder). I came across the slash slash equals operator, two forwards slashes and an equals sign &lt;code&gt;//=&lt;/code&gt;. No, it is not a comment. It is very similar to pipe pipe equals &lt;code&gt;||=&lt;/code&gt;, but is restricted to undef values. Google needs to work on a way to better search for programming operators.&lt;/p&gt;
</description>
     </item>
   
     <item>
       <title>Settings Backup</title>
       <link>https://sethammons.com/posts/backup_settings/</link>
       <pubDate>Sun, 28 Apr 2013 18:02:55 -0700</pubDate>
       
       <guid>https://sethammons.com/posts/backup_settings/</guid>
       <description>&lt;h3 id=&#34;settings-backup-and-restoration-with-github&#34;&gt;Settings Backup and Restoration with GitHub&lt;/h3&gt;
&lt;p&gt;A new Ubuntu version is coming out and the last thing I want to do is manually copy over my myriad of different config and settings files. I have my PS1 function set the way I like it, my Terminator terminal all set up with my keybindings and colors, some handy aliases, and some other rc_goodies. Thanks to the awesome power of GitHub, I fret of this aspect of upgrading no longer. I set up a repo that has a script that pulls in all my latest and greatest changes and can push those changes back out to my system.&lt;/p&gt;
&lt;h3 id=&#34;the-backuprestore-process&#34;&gt;The Backup/Restore Process&lt;/h3&gt;
&lt;p&gt;I have a python script that has a list of file names. For each file, it &lt;code&gt;shutil.copyfile()&lt;/code&gt;’s the file to my current working directory under &lt;code&gt;files/filename&lt;/code&gt;. There is one caveat. I change the filename from &lt;code&gt;/path/to/file&lt;/code&gt; to &lt;code&gt;slash__path__slash__to__slash__file&lt;/code&gt;. Upon restoration, I run the same script with a different flag for restoration. It changes those &lt;code&gt;__slash&lt;/code&gt; tokens back to a good ol’ forward-slash and copies the file back into the place it belongs. Prior to restoring the file, the script checks to see if the file already exists, and if it does, replace it with filename.BAK.&lt;/p&gt;
&lt;h3 id=&#34;on-a-new-system&#34;&gt;On a New System&lt;/h3&gt;
&lt;p&gt;All I have to do is git clone my repo, and run &lt;code&gt;grab_settings.py restore&lt;/code&gt;. Vim works the way I like. Terminator works the way I like. My aliases are all present. Done and done.&lt;/p&gt;
</description>
     </item>
   
 </channel>
</rss>
